#include <stdio.h>
#include <gtk/gtk.h>
#include <cairo.h>
#include <time.h>
#include "eletric.h"

// variaveis globais
charge q[4];
static double dt = .0001;
int mov=1; /* Default */
int action=0, contador=0;
int c=1,j=1,n=0;
vector l[1000];
GtkWidget *timer;
char buffer[256];
clock_t t0, p;
double temp=0,mostra;
GtkWidget *controlo_carga[TOTAL], *controlo_massa[TOTAL];
GtkWidget *def_carga[TOTAL];
GtkWidget *def_massa[TOTAL];

// CALLBACK do mouseclick
static gboolean clicked(GtkWidget *widget, GdkEventButton *event,gpointer data){
    if (event->button == 1) {
        q[mov].pos.x=event->x;
        q[mov].pos.y=event->y;
        
    }

    if (event->button == 3) {
        gtk_widget_queue_draw(widget);
    }

    return TRUE;
}

// CALLBACK dos radiobuttons
static void radio_change(GtkWidget *widget, int i){
	mov=i;
}
// CALLBACK do botao de pausa
static void tempo(GtkWidget *widget){
	contador++;
	action= contador % 2;
	if(action){
 		gtk_button_set_label(GTK_BUTTON(widget),"Pausa");
 		if(contador>1)
 			temp += (double)(clock()-p)/(double)CLOCKS_PER_SEC;
 	}
 	else{
 		gtk_button_set_label(GTK_BUTTON(widget),"Iniciar");
 		p=clock();
 	}	
 	if(contador==1)
 		t0=clock();
}
// CALLBACK do reset
static void limpa(GtkWidget *widget){
	c=1;
	t0=clock();
	temp=0;
	contador=action;
	gtk_label_set_text(GTK_LABEL(timer),"Tempo: 0.0 s");
	
}

static gboolean destroy (GtkWidget *window, gpointer data){
	gtk_main_quit ();
	return FALSE;
}
// Animacao
gboolean on_expose_event (GtkWidget *widget,GdkEventExpose *event,gpointer data){
	int i,b;
  cairo_t *cr ;
  gint width, height;

  gtk_window_get_size(GTK_WINDOW(widget), &width, &height);
  cr = gdk_cairo_create(widget->window);
  // Cargas fixas
  	// condicoes iniciais
  if(c){
  	q[3].pos.x=(1./10.)*width;
  	q[3].pos.y=(4./22.)*height;
  	q[1].pos.x=(4./10.)*width;
  	q[1].pos.y=(12.3/22.)*height;
  	q[2].pos.x=(3./10.)*width;
  	q[2].pos.y=(16./22.)*height;
  }
  cairo_arc (cr, q[3].pos.x,q[3].pos.y, q[3].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 0, 0, 1);
  cairo_fill (cr);
  
  cairo_arc (cr, q[1].pos.x,q[1].pos.y, q[1].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 0, 1, 0);
  cairo_fill (cr);
  
  cairo_arc (cr, q[2].pos.x,q[2].pos.y,q[2].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 1, 0, 0);
  cairo_fill (cr);
  
  // Carga livre
  
  cairo_set_source_rgb(cr, 0, 0, 0);
	cairo_set_line_width (cr, 0.5);
	
	
  double x0=(3./10.)*width;
  double y0=(10./22.)*height;
  // Condicoes iniciais
  if(c){
  q[0].pos.x=x0;
  q[0].pos.y=y0;
  
  l[0]=q[0].pos;
  }
  cairo_arc (cr, q[0].pos.x, q[0].pos.y, q[0].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 0, 0, 0);
  cairo_fill (cr);
  
  if(action){
  	mostra=((double)(clock()-t0)/(double)CLOCKS_PER_SEC);
  	sprintf(buffer,"Tempo: %.1lf s",mostra-temp);
  	gtk_label_set_text(GTK_LABEL(timer),buffer);
		// Bordas
		if ((q[0].pos.x < q[0].radius) || ((q[0].pos.x + q[0].radius) > width*(6./10.)))
		  q[0].vel.x = - q[0].vel.x;
		if ((q[0].pos.y < q[0].radius + (1./22.)*height) || ((q[0].pos.y + q[0].radius) > (18./22.)*height))
		  q[0].vel.y = -q[0].vel.y;
		
		// Mov
		q[0].force=factor(q[0].qt,eletric(q));
	
		q[0].a=factor(1/q[0].mass,q[0].force);
	
		q[0].vel = add(q[0].vel,factor(dt,q[0].a));
		q[0].pos = add(q[0].pos,factor(dt,q[0].vel));
		
		// Rasto
		j++;
		if(j==((n+1)*900)){
			n++;
		}
		l[j-n*900]=q[0].pos;
		if(j>100)
			b=100;
		else
			b=j;
	
		for(i=j-b;i<j;i++){
			cairo_move_to(cr, l[i-n*900].x, l[i-n*900].y);
			cairo_line_to(cr, l[i+1-n*900].x, l[i+1-n*900].y);
		}
		
  }
  
  cairo_stroke(cr);
  cairo_destroy(cr);
  
	c=0;
	
  return FALSE;
}

//Funcao que certifica a periodicidade
static gboolean time_handler (GtkWidget *widget){
  if (widget->window == NULL) 
    return FALSE;
	
	gtk_widget_queue_draw(widget);
  return TRUE;
}
// CALLBACKS dos sliders
void mudar_carga (GtkWidget *slider, int i)
{
  q[i].qt = (double) gtk_range_get_value(GTK_RANGE(slider));
}

void mudar_massa (GtkWidget *slider, int i)
{
  q[i].mass = (double) gtk_range_get_value(GTK_RANGE(slider));
  q[i].radius = (double) gtk_range_get_value(GTK_RANGE(slider));
}

void mudar_vel_x (GtkWidget *slider, int i){
  q[0].vel.x = (double) gtk_range_get_value(GTK_RANGE(slider));
}
void mudar_vel_y (GtkWidget *slider, int i){
	q[0].vel.y = (double) gtk_range_get_value(GTK_RANGE(slider));  
}   

int main (int argc, char *argv[])
{
  int i,j,k;
  char s[30];


  // Widgets a criar
  GtkWidget *screen, *tabela, *campo; 
  GtkWidget *legenda_carga[TOTAL];
  GtkWidget *legenda_massa[TOTAL];
  GtkWidget *controlo_vinicial[2], *legenda_vinicial[2], *def_vinicial[2];
  GtkWidget *pausa, *reset;
  GtkWidget *frame_massa, *frame_vinicial, *frame_carga, *frame_leg;
  GtkWidget *preto, *vermelho, *verde, *azul, *radio[TOTAL];
  
  //GSList *group;
  gtk_init (&argc, &argv);
 
  
  //parametros da janela
  screen = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title (GTK_WINDOW (screen), "Painel de Cargas");
  gtk_widget_set_size_request(screen,800,600);
  gtk_widget_set_app_paintable (screen, TRUE);
  gtk_window_set_position(GTK_WINDOW(screen), GTK_WIN_POS_CENTER);
  gtk_window_set_resizable(GTK_WINDOW(screen), FALSE);
  
  
  // Permite destruir janela no windows manager
  g_signal_connect (G_OBJECT (screen), "destroy",G_CALLBACK (destroy), NULL);
  
  
  // Tabela
  tabela = gtk_table_new(22,10,TRUE);
  gtk_container_add(GTK_CONTAINER(screen),tabela);
  gtk_table_set_row_spacings(GTK_TABLE(tabela), 2);
  gtk_table_set_col_spacings(GTK_TABLE(tabela), 2);

    
  //CAIXA
  campo = gtk_hbox_new (TRUE, 0);
	for(i=0;i<TOTAL;i++){
		q[i].radius=15;
	}
  //BOTOES
  pausa = gtk_button_new_with_label("Iniciar");
  reset = gtk_button_new_with_label("Reset");
  
  timer=gtk_label_new("Tempo: 0.0 s");
	
  //FRAMES
  frame_massa = gtk_frame_new("Massa/Raio");
  gtk_frame_set_shadow_type(GTK_FRAME(frame_massa), GTK_SHADOW_IN);
  frame_carga = gtk_frame_new("Cargas");
  gtk_frame_set_shadow_type(GTK_FRAME(frame_carga), GTK_SHADOW_IN);
  frame_vinicial = gtk_frame_new("Velocidade Inicial");
  gtk_frame_set_shadow_type(GTK_FRAME(frame_vinicial), GTK_SHADOW_IN);

  //IMAGENS
  preto = gtk_image_new_from_file("preto.png");
  vermelho = gtk_image_new_from_file("vermelho.png");
  verde = gtk_image_new_from_file("verde.png");
  azul = gtk_image_new_from_file("azul.png");

        

  //attach
  gtk_table_attach_defaults(GTK_TABLE(tabela), campo, 0, 6, 1, 9);
 	
 	gtk_table_attach_defaults(GTK_TABLE(tabela), timer, 2,4,20,21);
  gtk_table_attach_defaults(GTK_TABLE(tabela), pausa, 2, 3, 19, 20);
  gtk_table_attach_defaults(GTK_TABLE(tabela), reset, 3, 4, 19, 20);
  
  gtk_table_attach_defaults(GTK_TABLE(tabela), frame_carga, 6, 10, 1, 6);
  gtk_table_attach_defaults(GTK_TABLE(tabela), frame_massa, 6, 10, 7, 12);
  gtk_table_attach_defaults(GTK_TABLE(tabela), frame_vinicial, 6, 10, 13, 17);
  
  gtk_table_attach_defaults(GTK_TABLE(tabela), preto, 7, 8, 17, 18);
  radio[0]=gtk_radio_button_new_with_label (NULL, "Carga q0"); 
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[0],6,8,17,18);
  
  //group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (radio[0]));
  
  gtk_table_attach_defaults(GTK_TABLE(tabela), verde, 7, 8, 18, 19);
  radio[1]=gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio[0]),"Carga Q1");  
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[1],6,8,18,19);

  gtk_table_attach_defaults(GTK_TABLE(tabela), vermelho, 7, 8, 19, 20);
  radio[2]=gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio[0]),"Carga Q2");  
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[2],6,8,19,20);

  gtk_table_attach_defaults(GTK_TABLE(tabela), azul, 7, 8, 20, 21);
  radio[3]=gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio[0]),"Carga Q3");  
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[3],6,8,20,21);
  
	gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (radio[1]), TRUE);
  //SLIDERS CARGA

  for(i=0,k=0; i<2;i++)
    {
      for(j=0; j<2; j++)
	{
	  def_carga[k] = gtk_adjustment_new(0, -50, 50, 0.5, 0, 0);
	  controlo_carga[k] = gtk_hscale_new(GTK_ADJUSTMENT(def_carga[k]));

	  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_carga[k], 6+2*j, 8+2*j, 3+2*i,4+2*i); 
	  gtk_scale_set_value_pos(GTK_SCALE(controlo_carga[k]), GTK_POS_LEFT);

	  q[k].qt = (double) gtk_range_get_value(GTK_RANGE(controlo_carga[k]));
	  sprintf(s,"q%i",k);
      
	  legenda_carga[k]=gtk_label_new(s);
      
	  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_carga[k],6+2*j,8+2*j,2+i*2,3+i*2);
	  k++;
	}
    }
  
  //SLIDERS MASSA

  for(i=0,k=0; i<2;i++)
    {
      for(j=0; j<2; j++)
	{
	  def_massa[k] = gtk_adjustment_new(15, 5, 25, 0.1, 0, 0);
	  controlo_massa[k] = gtk_hscale_new(GTK_ADJUSTMENT(def_massa[k]));

	  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_massa[k], 6+2*j, 8+2*j, 9+2*i,10+2*i); 
	  gtk_scale_set_value_pos(GTK_SCALE(controlo_massa[k]), GTK_POS_LEFT);

	  q[k].mass = (double) gtk_range_get_value(GTK_RANGE(controlo_massa[k]));

	  sprintf(s,"q%i",k);
      
	  legenda_massa[k]=gtk_label_new(s);
      
	  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_massa[k],6+2*j,8+2*j,8+i*2,9+i*2);
	  k++;
	}
    }

  //SLIDERS V_INICIAL

  def_vinicial[0] = gtk_adjustment_new(0,-500, 500, 50., 0, 0);
  def_vinicial[1] = gtk_adjustment_new(0, -500,500, 50., 0, 0);
  controlo_vinicial[0] = gtk_hscale_new(GTK_ADJUSTMENT(def_vinicial[0]));
  controlo_vinicial[1] = gtk_hscale_new(GTK_ADJUSTMENT(def_vinicial[1]));
  
  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_vinicial[0], 6, 8, 15,16); 
  gtk_scale_set_value_pos(GTK_SCALE(controlo_vinicial[0]), GTK_POS_LEFT);

  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_vinicial[1], 8, 10, 15,16); 
  gtk_scale_set_value_pos(GTK_SCALE(controlo_vinicial[1]), GTK_POS_LEFT);

      
  q[0].vel.x = (double) gtk_range_get_value(GTK_RANGE(controlo_vinicial[0]));
  q[0].vel.y = (double) gtk_range_get_value(GTK_RANGE(controlo_vinicial[1]));
  
  legenda_vinicial[0] = gtk_label_new("Velocidade X");
  legenda_vinicial[1] = gtk_label_new("Velocidade Y");
  
  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_vinicial[0],6,8,14,15);
  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_vinicial[1],8,10,14,15);
 
  // ACCAO

  gtk_widget_add_events (screen, GDK_BUTTON_PRESS_MASK);
 	
  
  g_signal_connect (screen, "expose-event", G_CALLBACK(on_expose_event), NULL);

  //FUNCIONAMENTO DOS SLIDERS DE CARGA
  g_signal_connect (G_OBJECT(controlo_carga[0]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 0);
  g_signal_connect (G_OBJECT(controlo_carga[1]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 1);
  g_signal_connect (G_OBJECT(controlo_carga[2]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 2);
  g_signal_connect (G_OBJECT(controlo_carga[3]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 3);

  //FUNCIONAMENTO DOS SLIDERS DE MASSA
  g_signal_connect (G_OBJECT(controlo_massa[0]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 0);
  g_signal_connect (G_OBJECT(controlo_massa[1]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 1);
  g_signal_connect (G_OBJECT(controlo_massa[2]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 2);
  g_signal_connect (G_OBJECT(controlo_massa[3]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 3);

  //FUNCIONAMENTO DOS SLIDERS DE VELOCIDADE
 g_signal_connect (G_OBJECT(controlo_vinicial[0]), "value-changed", G_CALLBACK(mudar_vel_x),(gpointer) 0);
 g_signal_connect (G_OBJECT(controlo_vinicial[1]), "value-changed", G_CALLBACK(mudar_vel_y),(gpointer) 1);
  // FUNCIONAMENTO DOS RADIO BUTTONS
  g_signal_connect (G_OBJECT(radio[0]), "toggled", G_CALLBACK(radio_change),(gpointer) 0);
  g_signal_connect (G_OBJECT(radio[1]), "toggled", G_CALLBACK(radio_change),(gpointer) 1);
  g_signal_connect (G_OBJECT(radio[2]), "toggled", G_CALLBACK(radio_change),(gpointer) 2);
  g_signal_connect (G_OBJECT(radio[3]), "toggled", G_CALLBACK(radio_change),(gpointer) 3);
  
  
 	g_signal_connect(screen, "button-press-event", G_CALLBACK(clicked), NULL);
 	
 	//FUNCIONAMENTO DOS BOTOES
	g_signal_connect(G_OBJECT (pausa), "clicked", G_CALLBACK (tempo), NULL);
	g_signal_connect(G_OBJECT (reset), "clicked", G_CALLBACK (limpa), NULL);
	// Outras coisas
  g_timeout_add (10, (GSourceFunc) time_handler, (gpointer) screen); 
  time_handler(screen);  
  gtk_widget_show_all(screen);
  gtk_main ();
  return 0;
}

