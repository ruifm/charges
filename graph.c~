#include <stdio.h>
#include <gtk/gtk.h>
#include <cairo.h>
#include <time.h>
#include "eletric.h"

// variaveis globais
charge q[4];
static double dt = .0001;
int mov=1; /* Default */
int action=0, contador=0;
int c=1,j=0,n=0,bound=1,trail=0;
vector l[1100];
double x[1100],y[1100],z[1100],s[1100];
GtkWidget *timer,*erro,*res;
char buffer[256];
clock_t t0, p;
double temp=0,mostra;
GtkWidget *controlo_carga[TOTAL], *controlo_massa[TOTAL];
GtkWidget *controlo_vinicial[2], *legenda_vinicial[2];
GtkWidget *combo, *entry[4];
GtkWidget *screen, *graph;
GtkWidget *fronteira,*rasto;

// CALLBACK do mouseclick
static gboolean clicked(GtkWidget *widget, GdkEventButton *event,gpointer data){
	gint width, height;
  gtk_window_get_size(GTK_WINDOW(widget), &width, &height);
    if (event->button == 1) {
    	if((event->x > 0)&&((event->x)<width*(6./10.))&&(event->y > (1./22.)*height)&&((event->y) < (20./22.)*height)){
        q[mov].pos.x=event->x;
        q[mov].pos.y=event->y;
        }        
    }

    if (event->button == 3) {
        gtk_widget_queue_draw(widget);
    }

    return TRUE;
}

// CALLBACK dos radiobuttons
static void radio_change(GtkWidget *widget, int i){
	mov=i;
}

// CALLBACK do botao de pausa
static void tempo(GtkWidget *widget){
	contador++;
	action= contador % 2;
	if(action){
 		gtk_button_set_label(GTK_BUTTON(widget),"Pausa");
 		if(contador>1)
 			temp += (double)(clock()-p)/(double)CLOCKS_PER_SEC;
 	}
 	else{
 		p=clock();
 		if(contador>1)
 		gtk_button_set_label(GTK_BUTTON(widget),"Continuar");
 	}	
 	if(contador==1)
 		t0=clock();
}
// CALLBACK do reset
static void limpa(GtkWidget *widget){
	c=1;
	t0=clock();
	temp=0;
	contador=action;
	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(fronteira),TRUE);
	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(rasto),FALSE);
	gtk_label_set_text(GTK_LABEL(timer),"Tempo: 0.0 s");
	gtk_label_set_text(GTK_LABEL(erro),"Nenhum erro");
	gtk_label_set_text(GTK_LABEL(res)," ");
	gtk_entry_set_text(GTK_ENTRY(entry[0]),"");
	gtk_entry_set_text(GTK_ENTRY(entry[1]),"");
	gtk_entry_set_text(GTK_ENTRY(entry[2]),"");
	gtk_entry_set_text(GTK_ENTRY(entry[3]),"");
	gtk_combo_box_set_active(GTK_COMBO_BOX(combo),-1);
	
	gtk_range_set_value(GTK_RANGE(controlo_carga[0]),0);
	gtk_range_set_value(GTK_RANGE(controlo_carga[1]),0);
	gtk_range_set_value(GTK_RANGE(controlo_carga[2]),0);
	gtk_range_set_value(GTK_RANGE(controlo_carga[3]),0);
	
	gtk_range_set_value(GTK_RANGE(controlo_massa[0]),15);
	gtk_range_set_value(GTK_RANGE(controlo_massa[1]),15);
	gtk_range_set_value(GTK_RANGE(controlo_massa[2]),15);
	gtk_range_set_value(GTK_RANGE(controlo_massa[3]),15);
	
	gtk_range_set_value(GTK_RANGE(controlo_vinicial[0]),0);
	gtk_range_set_value(GTK_RANGE(controlo_vinicial[1]),0);
	
}

static gboolean destroy (GtkWidget *window, gpointer data){
	gtk_main_quit ();
	return FALSE;
}

// CALLBACK do botao calcular
static void calcular(GtkWidget *widget){
	gtk_label_set_text(GTK_LABEL(erro),"Nenhum erro");
	gtk_label_set_text(GTK_LABEL(res)," ");
	char b2[80];
	gint width, height;
  gtk_window_get_size(GTK_WINDOW(screen), &width, &height);
	double value[4];
	int i,teste[i];
	for(i=0;i<TOTAL;i++){
		teste[i]=sscanf(gtk_entry_get_text(GTK_ENTRY(entry[i])),"%lf",&value[i]);
	}
	for(i=0;i<TOTAL;i++){
		switch(gtk_combo_box_get_active(GTK_COMBO_BOX(combo))){
			case -1:
				gtk_label_set_text(GTK_LABEL(erro),"Nao selecionou nenhuma opcao");
				break;	
			case 0:
				{
				if(teste[i]){
					if(fabs(value[i])<=50){
						q[i].qt=value[i];
						gtk_range_set_value(GTK_RANGE(controlo_carga[i]),value[i]);
						gtk_label_set_text(GTK_LABEL(res),"Calculo da carga efectuado");
					}
					else{
						sprintf(b2,"Carga de Q%i muito elevado",i);
						gtk_label_set_text(GTK_LABEL(erro),b2);
					}
				}
				else{
					sprintf(b2,"Entrada de Q%i invalida",i);
					gtk_label_set_text(GTK_LABEL(erro),b2);
				}
				}
				break;
			case 1:
				{
				if((teste[i])&&(value[i])){
					if(((value[i]<=25)&&(value[i]>=5))||(value[i]==0)){
						if(value[i]){
							q[i].mass=value[i];
							q[i].radius=value[i];
							gtk_range_set_value(GTK_RANGE(controlo_massa[i]),value[i]);
						}
						gtk_label_set_text(GTK_LABEL(res),"Calculo da massa/raio efectuado");
					}
					else{
						sprintf(b2,"Massa de Q%i muito elevado/baixo",i);
						gtk_label_set_text(GTK_LABEL(erro),b2);
					}
				}
				else{
					sprintf(b2,"Entrada de Q%i invalida",i);
					gtk_label_set_text(GTK_LABEL(erro),b2);
				}
				}	
				break;
			case 2:
				{
				if(teste[i]){
					if(fabs(value[i])<=10000){
						q[i].vel.x=value[i];
						gtk_range_set_value(GTK_RANGE(controlo_vinicial[0]),value[i]);
						gtk_label_set_text(GTK_LABEL(res),"Calculo de vel x efectuado");
					}
					else{
						sprintf(b2,"Velocidade de Q%i muito elevado",i);
						gtk_label_set_text(GTK_LABEL(erro),b2);
					}
				}
				else{
					sprintf(b2,"Entrada de Q%i invalida",i);
					gtk_label_set_text(GTK_LABEL(erro),b2);
				}
				}
				break;
			case 3:
				{
				if(teste[i]){
					if(fabs(value[i])<=10000){
						q[i].vel.y=value[i];
						gtk_range_set_value(GTK_RANGE(controlo_vinicial[1]),value[i]);
						gtk_label_set_text(GTK_LABEL(res),"Calculo de vel y efectuado");
					}
					else{
						sprintf(b2,"Velocidade de Q%i muito elevado",i);
						gtk_label_set_text(GTK_LABEL(erro),b2);
					}
				}
				else{
					sprintf(b2,"Entrada de Q%i invalida",i);
					gtk_label_set_text(GTK_LABEL(erro),b2);
				}
				}
				break;
			case 4:
				{
				if(teste[i]){
					if((value[i] > 0)&&((value[i])<width*(6./10.))){
						q[i].pos.x=value[i];
						gtk_label_set_text(GTK_LABEL(res),"Calculo de pos x efectuado");
					}
					else{
						sprintf(b2,"Posicao de Q%i fora da janela",i);
						gtk_label_set_text(GTK_LABEL(erro),b2);
					}
				}
				else{
					sprintf(b2,"Entrada de Q%i invalida",i);
					gtk_label_set_text(GTK_LABEL(erro),b2);
				}
				}
				break;
			case 5:
				{
				if(teste[i]){
					if((value[i] > (1./22.)*height)&&((value[i]) < (20./22.)*height)){
						q[i].pos.y=value[i];
						gtk_label_set_text(GTK_LABEL(res),"Calculo de pos y efectuado");
					}
					else{
						sprintf(b2,"Posicao de Q%i fora da janela",i);
						gtk_label_set_text(GTK_LABEL(erro),b2);
					}
				}
				else{
					sprintf(b2,"Entrada de Q%i invalida",i);
					gtk_label_set_text(GTK_LABEL(erro),b2);
				}
				}
		}
	}
}
// CALLBACK de mudar combo
static void cleared(GtkWidget *widget){
	gtk_entry_set_text(GTK_ENTRY(entry[0]),"");
	gtk_entry_set_text(GTK_ENTRY(entry[1]),"");
	gtk_entry_set_text(GTK_ENTRY(entry[2]),"");
	gtk_entry_set_text(GTK_ENTRY(entry[3]),"");
	gtk_label_set_text(GTK_LABEL(erro),"Nenhum erro");
	gtk_label_set_text(GTK_LABEL(res)," ");
}
// CALLBACK do fronteiras checkbutton
static void border(GtkWidget *widget){
	if(gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(widget)))
		bound=1;
	else
		bound=0;
}
// CALLBACK do rasto checkbutton
static void set_trail(GtkWidget *widget){
	if(gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(widget)))
		trail=1;
	else
		trail=0;
}


// Animacao
gboolean on_expose_event (GtkWidget *widget,GdkEventExpose *event,gpointer data){
	int i,b;
  cairo_t *cr ;
  gint width, height;

  gtk_window_get_size(GTK_WINDOW(widget), &width, &height);
  cr = gdk_cairo_create(widget->window);
  // Cargas fixas
  	// condicoes iniciais
  if(c){
  	q[3].pos.x=(1./10.)*width;
  	q[3].pos.y=(4./22.)*height;
  	q[3].radius=15.;
  	q[3].mass=15.;
  	q[1].pos.x=(4./10.)*width;
  	q[1].pos.y=(12.3/22.)*height;
  	q[2].radius=15.;
  	q[2].mass=15.;
  	q[2].pos.x=(3./10.)*width;
  	q[2].pos.y=(16./22.)*height;
  	q[2].radius=15.;
  	q[2].mass=15.;
  }
  cairo_arc (cr, q[3].pos.x,q[3].pos.y, q[3].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 0, 0, 1);
  cairo_fill (cr);
  
  cairo_arc (cr, q[1].pos.x,q[1].pos.y, q[1].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 0, 1, 0);
  cairo_fill (cr);
  
  cairo_arc (cr, q[2].pos.x,q[2].pos.y,q[2].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 1, 0, 0);
  cairo_fill (cr);
  
  // Carga livre
  
  cairo_set_source_rgb(cr, 0, 0, 0);
	cairo_set_line_width (cr, 0.5);
	
	
  double x0=(3./10.)*width;
  double y0=(10./22.)*height;
  // Condicoes iniciais
  if(c){
  q[0].vel.x=0;
  q[0].vel.y=0;
  q[0].pos.x=x0;
  q[0].pos.y=y0;
  q[0].radius=15.;
  q[0].mass=15.;
  l[0]=q[0].pos;
  }
  cairo_arc (cr, q[0].pos.x, q[0].pos.y, q[0].radius, 0, 2. * M_PI);
  cairo_stroke_preserve (cr);
  
  cairo_set_source_rgb (cr, 0, 0, 0);
  cairo_fill (cr);
  
  if(action){
  	mostra=((double)(clock()-t0)/(double)CLOCKS_PER_SEC);
  	sprintf(buffer,"Tempo: %.1lf s",mostra-temp);
  	gtk_label_set_text(GTK_LABEL(timer),buffer);
		// Bordas
		if(bound){
			if ((q[0].pos.x < 0) || ((q[0].pos.x ) > width*(6./10.)))
				q[0].vel.x = - q[0].vel.x;
			if ((q[0].pos.y < (1./22.)*height) || ((q[0].pos.y) > (20./22.)*height))
				q[0].vel.y = -q[0].vel.y;
		}
		// Mov
		q[0].force=factor(q[0].qt,eletric(q));
	
		q[0].a=factor(1/q[0].mass,q[0].force);
	
		q[0].vel = add(q[0].vel,factor(dt,q[0].a));
		q[0].pos = add(q[0].pos,factor(dt,q[0].vel));
		
		// Rasto
		j++;
		if(j==((n+1)*900)){
			n++;
		}
		l[j-n*900]=q[0].pos;
		if(j>100)
			b=100;
		else
			b=j;
		if(trail){
			for(i=j-b;i<j;i++){
				cairo_move_to(cr, l[i-n*900].x, l[i-n*900].y);
				cairo_line_to(cr, l[i+1-n*900].x, l[i+1-n*900].y);
			}
		}
		
  }
  
  cairo_stroke(cr);
  cairo_destroy(cr);
  
	c=0;
	
  return FALSE;
}

//Funcao que certifica a periodicidade
static gboolean time_handler (GtkWidget *widget){
  if (widget->window == NULL) 
    return FALSE;
	
	gtk_widget_queue_draw(widget);
  return TRUE;
}

// PLOTTING
/*gboolean plot (GtkWidget *widget,GdkEventExpose *event,gpointer data){
	cairo_t *cr ;
  gint width, height;
  gtk_window_get_size(GTK_WINDOW(widget), &width, &height);
  cr = gdk_cairo_create(widget->window);

	double t=10*(mostra-temp);
	int i,b;
	
	x[j-n*900]=q[0].pos.x;
	y[j-n*900]=q[0].pos.y;
	z[j-n*900]=t;
	s[j-n*900]=sqrt(norma(q[0].vel));
	
	if(j>800)
		b=800;
	else
		b=j;
		
	for(i=j-b;i<j;i++){
		cairo_move_to(cr, z[i-n*900], x[i-n*900]);
		cairo_line_to(cr, z[i+1-n*900], x[i+1-n*900]);
		
		cairo_move_to(cr, z[i-n*900], y[i-n*900]);
		cairo_line_to(cr, z[i+1-n*900], y[i+1-n*900]);
		
		cairo_move_to(cr, z[i-n*900],(s[i-n*900]/100.) -100);
		cairo_line_to(cr, z[i+1-n*900],(s[i+1-n*900]/100.)-100);
	}
	
	cairo_stroke(cr);
  cairo_destroy(cr);
}
*/

// CALLBACKS dos sliders
void mudar_carga (GtkWidget *slider, int i)
{
  q[i].qt = (double) gtk_range_get_value(GTK_RANGE(slider));
}

void mudar_massa (GtkWidget *slider, int i)
{
  q[i].mass = (double) gtk_range_get_value(GTK_RANGE(slider));
  q[i].radius = (double) gtk_range_get_value(GTK_RANGE(slider));
}

void mudar_vel_x (GtkWidget *slider){
  q[0].vel.x = (double) gtk_range_get_value(GTK_RANGE(slider));
}
void mudar_vel_y (GtkWidget *slider){
	q[0].vel.y = (double) gtk_range_get_value(GTK_RANGE(slider));  
}   

int main (int argc, char *argv[]){
  int i,j,k;
  char s[30];


  // Widgets a criar
  GtkWidget *tabela, *campo; 
  GtkWidget *legenda_carga[TOTAL];
  GtkWidget *legenda_massa[TOTAL];
  GtkObject *def_vinicial[2], *def_carga[TOTAL], *def_massa[TOTAL];;
  GtkWidget *pausa, *reset,*compute;
  GtkWidget *frame_massa, *frame_vinicial, *frame_carga, *frame_leg;
  GtkWidget *preto, *vermelho, *verde, *azul, *radio[TOTAL];
  
  GtkWidget *texto;
  
  
  //GSList *group;
  gtk_init (&argc, &argv);
 
  
  //parametros da janela 1
  screen = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title (GTK_WINDOW (screen), "Painel de Cargas");
  gtk_widget_set_size_request(screen,1200,700);
  gtk_widget_set_app_paintable (screen, TRUE);
  gtk_window_set_position(GTK_WINDOW(screen), GTK_WIN_POS_CENTER);
  gtk_window_set_resizable(GTK_WINDOW(screen), FALSE);
  
  //parametros da janela 2
  graph = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title (GTK_WINDOW (graph), "Graficos");
  gtk_widget_set_size_request(graph,1200,700);
  gtk_widget_set_app_paintable (graph, TRUE);
  gtk_window_set_position(GTK_WINDOW(graph), GTK_WIN_POS_CENTER);
  gtk_window_set_resizable(GTK_WINDOW(graph), FALSE);
  
  
  // Permite destruir janela no windows manager
  g_signal_connect (G_OBJECT (screen), "destroy",G_CALLBACK (destroy), NULL);
  
  
  // Tabela
  tabela = gtk_table_new(22,10,TRUE);
  gtk_container_add(GTK_CONTAINER(screen),tabela);
  gtk_table_set_row_spacings(GTK_TABLE(tabela), 2);
  gtk_table_set_col_spacings(GTK_TABLE(tabela), 2);

    
  //CAIXA
  campo = gtk_hbox_new (TRUE, 0);
	for(i=0;i<TOTAL;i++){
		q[i].radius=15;
	}
  //BOTOES
  pausa = gtk_button_new_with_label("Iniciar");
  reset = gtk_button_new_with_label("Reset");
  compute=gtk_button_new_with_label("Calcular");
  
  fronteira=gtk_check_button_new_with_label("fronteiras");
  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(fronteira),TRUE);
  
  rasto=gtk_check_button_new_with_label("rasto");
  gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(rasto),FALSE);
  
  timer=gtk_label_new("Tempo: 0.0 s");
	texto=gtk_label_new("Controlos numericos de carga");
	erro=gtk_label_new("Nenhum erro");
	res=gtk_label_new(" ");
  //FRAMES
  frame_massa = gtk_frame_new("Massa/Raio");
  gtk_frame_set_shadow_type(GTK_FRAME(frame_massa), GTK_SHADOW_IN);
  frame_carga = gtk_frame_new("Cargas");
  gtk_frame_set_shadow_type(GTK_FRAME(frame_carga), GTK_SHADOW_IN);
  frame_vinicial = gtk_frame_new("Velocidade Inicial");
  gtk_frame_set_shadow_type(GTK_FRAME(frame_vinicial), GTK_SHADOW_IN);

  //IMAGENS
  preto = gtk_image_new_from_file("preto.png");
  vermelho = gtk_image_new_from_file("vermelho.png");
  verde = gtk_image_new_from_file("verde.png");
  azul = gtk_image_new_from_file("azul.png");

  //COMBOBOX E ENTRADAS
  combo = gtk_combo_box_new_text();
  gtk_combo_box_append_text(GTK_COMBO_BOX(combo), "Carga");
  gtk_combo_box_append_text(GTK_COMBO_BOX(combo), "Massa/Raio");
  gtk_combo_box_append_text(GTK_COMBO_BOX(combo), "V0 X");
  gtk_combo_box_append_text(GTK_COMBO_BOX(combo), "V0 Y");
  gtk_combo_box_append_text(GTK_COMBO_BOX(combo), "POS X");
  gtk_combo_box_append_text(GTK_COMBO_BOX(combo), "POS Y");
  

  entry[0] = gtk_entry_new();
  entry[1] = gtk_entry_new();
  entry[2] = gtk_entry_new();
  entry[3] = gtk_entry_new();



  //attach
  gtk_table_attach_defaults(GTK_TABLE(tabela), campo, 0, 6, 1, 9);
 	
  gtk_table_attach_defaults(GTK_TABLE(tabela), timer, 2,4,21,22);
  gtk_table_attach_defaults(GTK_TABLE(tabela), rasto, 5,6,21,22);
  gtk_table_attach_defaults(GTK_TABLE(tabela), pausa, 2, 3, 20, 21);
  gtk_table_attach_defaults(GTK_TABLE(tabela), reset, 3, 4, 20, 21);
  
  gtk_table_attach_defaults(GTK_TABLE(tabela), frame_carga, 6, 10, 0, 7);
  gtk_table_attach_defaults(GTK_TABLE(tabela), frame_massa, 6, 10, 7, 12);
  gtk_table_attach_defaults(GTK_TABLE(tabela), frame_vinicial, 6, 10, 12, 17);
  
  
  gtk_table_attach_defaults(GTK_TABLE(tabela),texto,6,8,17,18);
  gtk_table_attach_defaults(GTK_TABLE(tabela), combo, 8,10,17,18);
  gtk_table_attach_defaults(GTK_TABLE(tabela), compute, 8,9,19,20);
  gtk_table_attach_defaults(GTK_TABLE(tabela), fronteira, 8,9,18,19);
  gtk_table_attach_defaults(GTK_TABLE(tabela), res, 7,9,20,21);
  gtk_table_attach_defaults(GTK_TABLE(tabela), erro, 7,9,21,22);

  gtk_table_attach_defaults(GTK_TABLE(tabela), entry[0], 9,10, 18, 19);
  gtk_table_attach_defaults(GTK_TABLE(tabela), entry[1], 9,10, 19, 20);
  gtk_table_attach_defaults(GTK_TABLE(tabela), entry[2], 9,10, 20, 21);
  gtk_table_attach_defaults(GTK_TABLE(tabela), entry[3], 9,10, 21, 22);
  
	gtk_table_attach_defaults(GTK_TABLE(tabela), preto, 6, 8, 18, 19);
  radio[0]=gtk_radio_button_new_with_label (NULL, "Carga q0"); 
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[0],6,8,18,19);
  
  gtk_table_attach_defaults(GTK_TABLE(tabela), verde, 6, 8, 19, 20);
  radio[1]=gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio[0]),"Carga Q1");  
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[1],6,8,19,20);

  gtk_table_attach_defaults(GTK_TABLE(tabela), vermelho, 6, 8, 20, 21);
  radio[2]=gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio[0]),"Carga Q2");  
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[2],6,8,20,21);

  gtk_table_attach_defaults(GTK_TABLE(tabela), azul, 6, 8, 21, 22);
  radio[3]=gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio[0]),"Carga Q3");  
  gtk_table_attach_defaults(GTK_TABLE(tabela),radio[3],6,8,21,22);
  
	gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (radio[1]), TRUE);
  //SLIDERS CARGA

  for(i=0,k=0; i<2;i++)
    {
      for(j=0; j<2; j++)
	{
	  def_carga[k] = gtk_adjustment_new(0., -50., 50., 0.5, 0., 0.);
	  
	  
	  
	  controlo_carga[k] = gtk_hscale_new(GTK_ADJUSTMENT(def_carga[k]));

	  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_carga[k], 6+2*j, 8+2*j, 1+3*i,4+3*i); 
	  gtk_scale_set_value_pos(GTK_SCALE(controlo_carga[k]), GTK_POS_LEFT);
	  gtk_scale_add_mark(GTK_SCALE(controlo_carga[k]),0,GTK_POS_TOP,"0");

	  q[k].qt = (double) gtk_range_get_value(GTK_RANGE(controlo_carga[k]));
	  sprintf(s,"q%i",k);
      
	  legenda_carga[k]=gtk_label_new(s);
      
	  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_carga[k],6+2*j, 8+2*j, 3*i,3+3*i);
	  k++;
	}
    }
  
  //SLIDERS MASSA

  for(i=0,k=0; i<2;i++)
    {
      for(j=0; j<2; j++)
	{
	  def_massa[k] = gtk_adjustment_new(15, 5, 25, 0.1, 0, 0);
	  controlo_massa[k] = gtk_hscale_new(GTK_ADJUSTMENT(def_massa[k]));

	  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_massa[k], 6+2*j, 8+2*j, 9+2*i,10+2*i); 
	  gtk_scale_set_value_pos(GTK_SCALE(controlo_massa[k]), GTK_POS_LEFT);
	  q[k].mass = (double) gtk_range_get_value(GTK_RANGE(controlo_massa[k]));

	  sprintf(s,"q%i",k);
      
	  legenda_massa[k]=gtk_label_new(s);
      
	  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_massa[k],6+2*j,8+2*j,8+i*2,9+i*2);
	  k++;
	}
    }

  //SLIDERS V_INICIAL

  def_vinicial[0] = gtk_adjustment_new(0,-5000, 5000, 250., 0, 0);
  def_vinicial[1] = gtk_adjustment_new(0, -5000,5000, 250., 0, 0);
  controlo_vinicial[0] = gtk_hscale_new(GTK_ADJUSTMENT(def_vinicial[0]));
  controlo_vinicial[1] = gtk_hscale_new(GTK_ADJUSTMENT(def_vinicial[1]));
  
  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_vinicial[0], 6, 8, 14,16); 
  gtk_scale_set_value_pos(GTK_SCALE(controlo_vinicial[0]), GTK_POS_LEFT);
	gtk_scale_add_mark(GTK_SCALE(controlo_vinicial[0]),0,GTK_POS_TOP,"0");
  gtk_table_attach_defaults(GTK_TABLE(tabela), controlo_vinicial[1], 8, 10, 14,16); 
  gtk_scale_set_value_pos(GTK_SCALE(controlo_vinicial[1]), GTK_POS_LEFT);
	gtk_scale_add_mark(GTK_SCALE(controlo_vinicial[1]),0,GTK_POS_TOP,"0");
      
  q[0].vel.x = (double) gtk_range_get_value(GTK_RANGE(controlo_vinicial[0]));
  q[0].vel.y = (double) gtk_range_get_value(GTK_RANGE(controlo_vinicial[1]));
  
  legenda_vinicial[0] = gtk_label_new("Velocidade X");
  legenda_vinicial[1] = gtk_label_new("Velocidade Y");
  
  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_vinicial[0],6,8,13,14);
  gtk_table_attach_defaults(GTK_TABLE(tabela),legenda_vinicial[1],8,10,13,14);
 
  // ACCAO

  gtk_widget_add_events (screen, GDK_BUTTON_PRESS_MASK);
 	
  
  g_signal_connect (screen, "expose-event", G_CALLBACK(on_expose_event), NULL);

  //FUNCIONAMENTO DOS SLIDERS DE CARGA
  g_signal_connect (G_OBJECT(controlo_carga[0]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 0);
  g_signal_connect (G_OBJECT(controlo_carga[1]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 1);
  g_signal_connect (G_OBJECT(controlo_carga[2]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 2);
  g_signal_connect (G_OBJECT(controlo_carga[3]), "value-changed", G_CALLBACK(mudar_carga),(gpointer) 3);

  //FUNCIONAMENTO DOS SLIDERS DE MASSA
  g_signal_connect (G_OBJECT(controlo_massa[0]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 0);
  g_signal_connect (G_OBJECT(controlo_massa[1]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 1);
  g_signal_connect (G_OBJECT(controlo_massa[2]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 2);
  g_signal_connect (G_OBJECT(controlo_massa[3]), "value-changed", G_CALLBACK(mudar_massa),(gpointer) 3);

  //FUNCIONAMENTO DOS SLIDERS DE VELOCIDADE
 g_signal_connect (G_OBJECT(controlo_vinicial[0]), "value-changed", G_CALLBACK(mudar_vel_x),NULL);
 g_signal_connect (G_OBJECT(controlo_vinicial[1]), "value-changed", G_CALLBACK(mudar_vel_y),NULL);
  // FUNCIONAMENTO DOS RADIO BUTTONS
  g_signal_connect (G_OBJECT(radio[0]), "toggled", G_CALLBACK(radio_change),(gpointer) 0);
  g_signal_connect (G_OBJECT(radio[1]), "toggled", G_CALLBACK(radio_change),(gpointer) 1);
  g_signal_connect (G_OBJECT(radio[2]), "toggled", G_CALLBACK(radio_change),(gpointer) 2);
  g_signal_connect (G_OBJECT(radio[3]), "toggled", G_CALLBACK(radio_change),(gpointer) 3);
  
  
 	g_signal_connect(screen, "button-press-event", G_CALLBACK(clicked), NULL);

 	//FUNCIONAMENTO DOS BOTOES
	g_signal_connect(G_OBJECT (pausa), "clicked", G_CALLBACK (tempo), NULL);
	g_signal_connect(G_OBJECT (reset), "clicked", G_CALLBACK (limpa), NULL);
	g_signal_connect(G_OBJECT (fronteira), "toggled", G_CALLBACK (border), NULL);
	g_signal_connect(G_OBJECT (rasto), "toggled", G_CALLBACK (set_trail), NULL);
	//COMBO
	g_signal_connect(G_OBJECT (compute),"clicked",G_CALLBACK (calcular),NULL);
	g_signal_connect(G_OBJECT(combo),"changed",G_CALLBACK(cleared),NULL);
	// Outras coisas
  g_timeout_add (10, (GSourceFunc) time_handler, (gpointer) screen); 
  time_handler(screen); 
  
  // on expose event do graph
  //gtk_widget_add_events (graph, GDK_BUTTON_PRESS_MASK);
  //g_signal_connect (graph, "expose-event", G_CALLBACK(plot), NULL);
	//g_timeout_add (10, (GSourceFunc) time_handler, (gpointer) graph); 
  //time_handler(graph); 
  
  gtk_widget_show_all(graph); 
  gtk_widget_show_all(screen);
  gtk_main ();
  return 0;
}

